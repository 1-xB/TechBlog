@page "/author/create"
@using System.Security.Claims
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using TechBlogAPI.Client.Auth
@using TechBlogAPI.Client.Models
@using TechBlogAPI.Client.Pages.Author.Compoments
@using TechBlogAPI.Client.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JS
@inject IPostService PostService
@inject ICategoryService CategoryService
@inject HttpClient Http


<AuthorHeader  Username="@Username" OnLogout="OnClickLogout"></AuthorHeader>

<div class="admin-container">
    <nav class="sidebar">
        <ul>
            <li><a href="/author/create">Create post</a></li>
            <li><a href="/author/posts">My posts</a></li>
        </ul>
    </nav>
    <div class="content">
        @if (!string.IsNullOrEmpty(ErrorMessage)) {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
        }
        <EditForm Model="@postModel" OnValidSubmit="PublishPost">
            <DataAnnotationsValidator />
    
            <div class="form-group" style="margin: 20px">
                <label for="titleInput">Title</label>
                <InputText id="titleInput" class="form-control" @bind-Value="postModel.Title" />
                <ValidationMessage For="@(() => postModel.Title)" />
            </div>
            
            <div id="editor-container" style="height: 200px; background: black; color: white;"></div>
    
            <div class="form-group" style="margin: 20px">
                <label for="categorySelect">Categories</label>
                <RadzenStack id="categorySelect" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-sm-12">
                    <RadzenLabel Text="Select Values" Component="DropDownMultipleChips" />
                    <RadzenDropDown @bind-Value=@postModel.CategoryIds Data=@Categories TextProperty="@nameof(Category.Name)" ValueProperty="@nameof(Category.CategoryId)" Name="DropDownMultipleChips"
                                    Multiple=true AllowClear=true Placeholder="Select categories" Chips=true Style="width: 100%; max-width: 400px;" />
                </RadzenStack>
            </div>
    
            <button type="submit" class="btn btn-primary mt-3">Publish</button>
        </EditForm>
    </div>
</div>

<style>
    body {
        margin: 0;
        padding: 0;
        background-color: #121212;
        color: #e0e0e0;
    }

    .admin-container {
        display: flex;
        min-height: calc(100vh - 60px);
        background-color: #121212;
    }

    .sidebar {
        width: 250px;
        background-color: #1f1f1f;
        padding: 20px;
    }

    .sidebar ul {
        list-style-type: none;
        padding: 0;
    }

    .sidebar li {
        margin-bottom: 10px;
        padding: 8px 12px;
        border-radius: 4px;
    }

    .sidebar li a {
        text-decoration: none;
        color: #e0e0e0;
        font-weight: bold;
        display: block;
    }
    
    .sidebar li:hover {
        background-color: #2e2e2e;
        cursor: pointer;
    }

    .content {
        flex: 1;
        padding: 20px;
        color: #e0e0e0;
    }

    .btn-outline-light {
        border-color: #e0e0e0;
        color: #e0e0e0;
    }
    
    .btn-outline-light:hover {
        background-color: #e0e0e0;
        color: #121212;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    .form-control {
        background-color: #2d2d2d;
        border: 1px solid #3f3f3f;
        color: #e0e0e0;
        padding: 10px;
    }
    
    .form-control:focus {
        background-color: #2d2d2d;
        border-color: #5f5f5f;
        color: #e0e0e0;
        box-shadow: 0 0 0 0.2rem rgba(255, 255, 255, 0.15);
    }
    
    label {
        color: #e0e0e0;
        margin-bottom: 0.5rem;
        display: block;
    }
    
    .btn-primary {
        background-color: #375a7f;
        border-color: #375a7f;
    }
    
    .btn-primary:hover {
        background-color: #2b4764;
        border-color: #2b4764;
    }
    
    .alert-danger {
        background-color: #542b2b;
        border-color: #842029;
        color: #ea868f;
    }
    
    #editor-container {
        height: 300px;
        background-color: #1f1f1f;
        color: #e0e0e0;
        border: 1px solid #3f3f3f;
        margin-bottom: 20px;
        border-radius: 4px;
    }
    

    .rz-dropdown {
        background-color: #2d2d2d;
        border-color: #3f3f3f;
        color: #e0e0e0;
    }
    
    .rz-dropdown:hover, .rz-dropdown:focus {
        background-color: #2d2d2d;
        border-color: #5f5f5f;
    }
    
    .rz-dropdown-item, .rz-dropdown-items {
        background-color: #2d2d2d;
        color: #e0e0e0;
    }
    
    .rz-dropdown-item:hover {
        background-color: #3f3f3f;
        color: #ffffff;
    }
    
    .rz-chip {
        background-color: #375a7f;
        color: #e0e0e0;
    }
</style>

@code {
    private string? Username;
    private string? ErrorMessage;
    
    private PublishPostRequest postModel = new();
    private List<Category>? Categories;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated == true && !authState.User.IsInRole("Author")) {
            NavigationManager.NavigateTo("/author");
        }
        Username = authState.User.Identity?.Name;
        
        try
        {
            Categories = await CategoryService.GetAllCategoriesAsync();
            if (Categories is null)
            {
                ErrorMessage = "An error occurred while downloading the category, try refreshing the page or try again";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error during category download: {ex.Message}";
        }
    }

    private async Task OnClickLogout() {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/author");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initQuill");
        }
    }

    private async Task PublishPost()
    {
        string? apiUrl = Http.BaseAddress?.ToString()?.TrimEnd('/');
    
        if (string.IsNullOrEmpty(apiUrl))
        {
            ErrorMessage = "Failed to retrieve API address";
            return;
        }
        string htmlContent = await JS.InvokeAsync<string>("getQuillHtml", apiUrl);

        var textContent = Regex.Replace(htmlContent, "<.*?>", string.Empty);
        if (string.IsNullOrWhiteSpace(textContent) || textContent.Trim().Length < 10)
        {
            ErrorMessage = "The content of the post must be at least 10 characters long";
            return;
        }
        
        PublishPostRequest newPost = new()
        {
            Title = postModel.Title,
            Content = htmlContent,
            CategoryIds = postModel.CategoryIds
        };

        var result = await PostService.PublishPostAsync(newPost);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/author/posts");
        }
        else
        {
            ErrorMessage = result.Message;
        }
    }
}