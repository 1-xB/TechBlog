@page "/author/posts"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using TechBlogAPI.Client.Auth
@using TechBlogAPI.Client.Models
@using TechBlogAPI.Client.Pages.Author.Compoments
@using TechBlogAPI.Client.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IPostService PostService


<AuthorHeader Username="@Username" OnLogout="OnClickLogout"></AuthorHeader>

<div class="admin-container">
    <nav class="sidebar">
        <ul>
            <li><a href="/author/create">Create post</a></li>
            <li><a href="/author/posts">My posts</a></li>
        </ul>
    </nav>
    <div class="content">

        <h1>Your posts:</h1>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
        }
        @if (authorPosts is not null && authorPosts.Any())
        {
            @foreach (var post in authorPosts)
            {
                <div class="card mb-3 shadow" style="background-color: #2d2d2d; border: none;">
                    <div class="card-header" style="background-color: #1e1e1e; border-bottom: 1px solid #444;">
                        <h3 class="card-title" style="color: #fff;">@post.Title</h3>
                    </div>
                    <div class="card-body" style="background-color: #2d2d2d;">
                        <p class="card-text">
                            <small style="color: #aaa;">Written on @post.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                        </p>
                    </div>
                    <div class="card-footer"
                         style="background-color: #1e1e1e; border-top: 1px solid #444; color: #aaa;">
                        @if (post.Categories != null && post.Categories.Any())
                        {
                            <div>
                                Categories:
                                @foreach (var category in post.Categories)
                                {
                                    <span class="badge me-1"
                                          style="background-color: #444; color: #fff;">@category.Name</span>
                                }
                            </div>
                        }
                        <button class="btn btn-danger" @onclick="() => DeletePost(post.PostId)">Delete</button>
                    </div>
                </div>
            }
        }
        else
        {
            <p>You don't have any posts yet.</p>
        }

    </div>
</div>

<style>
    body {
        margin: 0;
        padding: 0;
    }

    .admin-container {
        display: flex;
        min-height: calc(100vh - 60px); /* header height adjustment */
        background-color: #121212;
    }

    .sidebar {
        width: 250px;
        background-color: #1f1f1f;
        padding: 20px;
    }

    .sidebar ul {
        list-style-type: none;
        padding: 0;
    }

    .sidebar li {
        margin-bottom: 10px;
    }

    .sidebar li a {
        text-decoration: none;
        color: #fff;
        font-weight: bold;
    }

    .sidebar li:hover {
        background-color: #2e2e2e;
        cursor: pointer;
    }

    .content {
        flex: 1;
        padding: 20px;
        color: #fff;
    }

    .btn-outline-light {
        border-color: #fff;
        color: #fff;
    }

    .btn-outline-light:hover {
        background-color: #fff;
        color: #000;
    }
</style>

@code {
    private string? Username;
    private List<PostModel?> authorPosts;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated == true && !authState.User.IsInRole("Author"))
        {
            NavigationManager.NavigateTo("/author");
        }

        Username = authState.User.Identity?.Name;


        var authorIdClaim = authState.User.FindFirst("AuthorId");
        if (authorIdClaim is not null && int.TryParse(authorIdClaim.Value, out var authorId))
        {
            authorPosts = await PostService.GetAuthorPostsAsync(authorId);
        }
        else
        {
            await AuthService.LogoutAsync();
            NavigationManager.NavigateTo("/author");
        }
    }

    private async Task OnClickLogout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/author");
    }

    private async Task DeletePost(int postId)
    {
        var result = await PostService.DeletePostAsync(postId);
        if (!result.Success)
        {
            ErrorMessage = result.ErrorMessage;
        }
        else
        {
            NavigationManager.Refresh();
        }
    }

}