@page "/author/panel"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using TechBlogAPI.Client.Auth
@using TechBlogAPI.Client.Pages.Author.Compoments
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject AuthService AuthService


<AuthorHeader  Username="@Username" OnLogout="OnClickLogout"></AuthorHeader>

<div class="admin-container">
    <nav class="sidebar">
        <ul>
            <li><a href="/author/create">Create post</a></li>
            <li><a href="/author/posts">My posts</a></li>
        </ul>
    </nav>
    <div class="content">
        
        @if (!string.IsNullOrEmpty(FirstName) && !string.IsNullOrEmpty(LastName))
        {
            <h1>Hello @FirstName @LastName!</h1>
        }
        else if (!string.IsNullOrEmpty(Username))
        {
            <h1>Hello @Username!</h1>
        }
        else
        {
            <h1>Hello!</h1>
        }
        

    </div>
</div>

<style>
    body {
        margin: 0;
        padding: 0;
    }

    .admin-container {
        display: flex;
        min-height: calc(100vh - 60px); /* header height adjustment */
        background-color: #121212;
    }

    .sidebar {
        width: 250px;
        background-color: #1f1f1f;
        padding: 20px;
    }

    .sidebar ul {
        list-style-type: none;
        padding: 0;
    }

    .sidebar li {
        margin-bottom: 10px;
    }

    .sidebar li a {
        text-decoration: none;
        color: #fff;
        font-weight: bold;
    }
    .sidebar li:hover {
        background-color: #2e2e2e;
        cursor: pointer;
    }

    .content {
        flex: 1;
        padding: 20px;
        color: #fff;
    }

    .btn-outline-light {
        border-color: #fff;
        color: #fff;
    }
    .btn-outline-light:hover {
        background-color: #fff;
        color: #000;
    }
</style>

@code {
    private string? FirstName;
    private string? LastName;
    private string? Username;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated == true && !authState.User.IsInRole("Author")) {
            NavigationManager.NavigateTo("/author");
        }

        FirstName = authState.User.FindFirst(ClaimTypes.GivenName)?.Value ;
        LastName = authState.User.FindFirst(ClaimTypes.Surname)?.Value ;
        Username = authState.User.Identity?.Name;
    }

    private async Task OnClickLogout() {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/author");
    }
}